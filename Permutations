Question:

Link:
https://leetcode.com/problems/permutations/description/

Given an array nums of distinct integers, return all the possible permutations. You can return the answer in any order.

 

Example 1:

Input: nums = [1,2,3]
Output: [[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]
Example 2:

Input: nums = [0,1]
Output: [[0,1],[1,0]]
Example 3:

Input: nums = [1]
Output: [[1]]

Answer:

class Solution {
public:
    void permutation(vector<int>&answer,vector<int>& nums,vector<vector<int>>&ans,map<int,bool>&visit)
    {
        if(answer.size()==nums.size())
        {
            ans.push_back(answer);
            return;
        }
        for(int i = 0 ; i<nums.size() ; i++)
        {
            if(visit[i]==false)
            {
                answer.push_back(nums[i]);
                visit[i]=true;
                permutation(answer,nums,ans,visit);
                answer.pop_back();
                visit[i]=false;
            }
        }
    }
    vector<vector<int>> permute(vector<int>& nums) {
        int n = nums.size();
        vector<vector<int>>ans;
        if(n==0)return ans;
        vector<int>answer;
        map<int,bool>visit;
        permutation(answer,nums,ans,visit);
        return ans;
    }
};
