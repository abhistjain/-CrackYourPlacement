QUESTION:

LINK: https://leetcode.com/problems/balanced-binary-tree/description/

Given a binary tree, determine if it is height-balanced.


Example 1:


Input: root = [3,9,20,null,null,15,7]
Output: true
Example 2:


Input: root = [1,2,2,3,3,null,null,4,4]
Output: false
Example 3:

Input: root = []
Output: true


ANSWER:

class Solution {
public:
    pair<bool,int> balance(TreeNode*root)
    {
        if(root == NULL){
            pair<bool,int>p = make_pair(true,0);
            return p;
        }
        pair<bool,int>leftt = balance(root->left);
        pair<bool,int>rightt = balance(root->right);
        bool lheight = leftt.first;
        bool rheight = rightt.first;
        bool absol = abs(leftt.second-rightt.second)<=1;
        pair<bool,int>p;
        if(lheight && rheight && absol)
        {
            p = make_pair(true,1 + max(leftt.second,rightt.second));
        }
        else
        {
            p = make_pair(false,1 + max(leftt.second,rightt.second));
        }
        return p;
    }
    bool isBalanced(TreeNode* root) {
        if(root ==NULL)return true;
        pair<bool,int> p = balance(root);
        return p.first;
    }
};

TC = O(N)

/**
 class Solution {
public:
    bool isBalanced(TreeNode* root) {
        if (root == NULL)
            return true;
        int lh = height(root->left); 
        int rh = height(root->right);    
        if (abs(lh - rh) > 1)
            return false; 
        bool left = isBalanced(root->left); 
        bool right = isBalanced(root->right);  
        if (left == false || right == false) 
            return false;    
        return true;
    }
    int height(TreeNode* root) {
        if (root == NULL)
            return 0;
        int lh = height(root->left);
        int rh = height(root->right);
        return 1 + max (lh, rh);      
    }
};
**/
