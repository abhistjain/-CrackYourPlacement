Question:

Link: https://practice.geeksforgeeks.org/problems/detect-cycle-in-an-undirected-graph/1

Given an undirected graph with V vertices and E edges, check whether it contains any cycle or not. Graph is in the form of adjacency list where adj[i] contains all the nodes ith node is having edge with.

Example 1:

Input:  
V = 5, E = 5
adj = {{1}, {0, 2, 4}, {1, 3}, {2, 4}, {1, 3}} 
Output: 1
Explanation: 

1->2->3->4->1 is a cycle.
Example 2:

Input: 
V = 4, E = 2
adj = {{}, {2}, {1, 3}, {2}}
Output: 0
Explanation: 

No cycle in the graph.


Answer:

class Solution {
  public:
    // Function to detect cycle in an undirected graph.
    bool bfs(int src,vector<bool>&visited,vector<int> adj[],vector<int>&parent)
    {
        bool result = false;
        queue<int>q;
        q.push(src);
        visited[src]=true;
        parent[src] = -1;
        while(!q.empty())
        {
            int front = q.front();
            q.pop();
            for(auto i : adj[front])
            {
                if(visited[i]==true && parent[front]!=i)
                {
                    result = true;
                    return result;
                }
                else
                if(!visited[i])
                {
                    parent[i]=front;
                    visited[i]=true;
                    q.push(i);
                }
            }
        }
        return false;
    }
    
    bool isCycle(int V, vector<int> adj[]) {
        // Code here
        
        bool result = false;
        vector<bool>visited(V,false);
        vector<int>parent(V,-1);
        for(int i = 0 ; i<V ; i++)
        {
            if(!visited[i])
            {
                result = bfs(i,visited,adj,parent);
                if(result == true)return true;
            }
        }
        return false;
    }
};

