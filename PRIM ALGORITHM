Question:

https://www.hackerrank.com/challenges/primsmstsub/problem?utm_campaign=challenge-recommendation&utm_medium=email&utm_source=24-hour-campaign
Prims Algorithm:

Answer:

#include <bits/stdc++.h>

using namespace std;

string ltrim(const string &);
string rtrim(const string &);
vector<string> split(const string &);

/*
 * Complete the 'prims' function below.
 *
 * The function is expected to return an INTEGER.
 * The function accepts following parameters:
 *  1. INTEGER n
 *  2. 2D_INTEGER_ARRAY edges
 *  3. INTEGER start
 */

int prims(int n, vector<vector<int>> edges, int start) {
    unordered_map<int,list<pair<int,int>>>adjlist;
    for(int i = 0 ; i<edges.size() ; i++)
    {
        int u = edges[i][0];
        int v = edges[i][1];
        int w = edges[i][2];
        adjlist[u].push_back(make_pair(v,w));
        adjlist[v].push_back(make_pair(u,w));
    }
    vector<int>key(n+1);
    vector<bool>visited(n+1);
    vector<int>parent(n+1);
    
    int ans= 0 ;
    
    for(int i = 0 ; i<n+1 ; i++)
    {
        key[i] = INT_MAX;
        visited[i]= false;
        parent[i]=-1;
    }
    
    key[start] = 0 ;
    parent[start]=-1;
    for(int i = 1; i<n+1 ; i++)
    {
        int mini = INT_MAX;
        int u;
        for(int v = 1 ; v<n+1 ; v++)
        {
            if(visited[v] == false && mini>key[v])
            {
                mini = key[v];
                u =v;
            }
        }
        visited[u]=true;
        for(auto it : adjlist[u])
        {
            int node = it.first;
            int weight = it.second;
            if(visited[node]==false && weight<key[node])
            {
                parent[node]=u;
                key[node]=weight;
            }
        }
    }
    for(int i = 1 ; i<n+1 ; i++)
    {
        ans+=key[i];
    }
    return ans;
}

int main()
{
    ofstream fout(getenv("OUTPUT_PATH"));

    string first_multiple_input_temp;
    getline(cin, first_multiple_input_temp);

    vector<string> first_multiple_input = split(rtrim(first_multiple_input_temp));

    int n = stoi(first_multiple_input[0]);

    int m = stoi(first_multiple_input[1]);

    vector<vector<int>> edges(m);

    for (int i = 0; i < m; i++) {
        edges[i].resize(3);

        string edges_row_temp_temp;
        getline(cin, edges_row_temp_temp);

        vector<string> edges_row_temp = split(rtrim(edges_row_temp_temp));

        for (int j = 0; j < 3; j++) {
            int edges_row_item = stoi(edges_row_temp[j]);

            edges[i][j] = edges_row_item;
        }
    }

    string start_temp;
    getline(cin, start_temp);

    int start = stoi(ltrim(rtrim(start_temp)));

    int result = prims(n, edges, start);

    fout << result << "\n";

    fout.close();

    return 0;
}

string ltrim(const string &str) {
    string s(str);

    s.erase(
        s.begin(),
        find_if(s.begin(), s.end(), not1(ptr_fun<int, int>(isspace)))
    );

    return s;
}

string rtrim(const string &str) {
    string s(str);

    s.erase(
        find_if(s.rbegin(), s.rend(), not1(ptr_fun<int, int>(isspace))).base(),
        s.end()
    );

    return s;
}

vector<string> split(const string &str) {
    vector<string> tokens;

    string::size_type start = 0;
    string::size_type end = 0;

    while ((end = str.find(" ", start)) != string::npos) {
        tokens.push_back(str.substr(start, end - start));

        start = end + 1;
    }

    tokens.push_back(str.substr(start));

    return tokens;
}
