Question:

47. Permutations II

Link: https://leetcode.com/problems/permutations-ii/description/
Given a collection of numbers, nums, that might contain duplicates, return all possible unique permutations in any order.

 

Example 1:

Input: nums = [1,1,2]
Output:
[[1,1,2],
 [1,2,1],
 [2,1,1]]
Example 2:

Input: nums = [1,2,3]
Output: [[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]

Answer:

class Solution {
public:
    void permutation(vector<int>& nums,vector<vector<int>>&ans,map<int,bool>&visited,vector<int>&answer)
    {
        if(answer.size()==nums.size())
        {
            auto it = find(ans.begin(),ans.end(),answer);
            if(it==ans.end())ans.push_back(answer);
            return;
        }
        for(int i = 0 ; i<nums.size() ; i++)
        {
            if(visited[i]==false)
            {
                visited[i]=true;
                answer.push_back(nums[i]);
                permutation(nums,ans,visited,answer);
                answer.pop_back();
                visited[i]=false;
            }
        }
    }
    vector<vector<int>> permuteUnique(vector<int>& nums) {
        int n = nums.size();
        vector<vector<int>>ans;
        if(n==0)return ans;
        map<int,bool>visited;
        vector<int>answer;
        permutation(nums,ans,visited,answer);
        return ans;
    }
};
