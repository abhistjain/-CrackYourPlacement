Question:

LINK: https://leetcode.com/problems/valid-parentheses/

Given a string s containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid.

An input string is valid if:

Open brackets must be closed by the same type of brackets.
Open brackets must be closed in the correct order.
Every close bracket has a corresponding open bracket of the same type.
 

Example 1:

Input: s = "()"
Output: true
Example 2:

Input: s = "()[]{}"
Output: true
Example 3:

Input: s = "(]"
Output: false
 

Constraints:

1 <= s.length <= 104
s consists of parentheses only '()[]{}'.

ANSWER:

class Solution {
public:
    bool result(char open , char closed)
    {
        if(open == '{' && closed == '}')return true;
        if(open == '[' && closed == ']')return true;
        if(open == '(' && closed == ')')return true;
        return false;
    }

    bool isValid(string s) {
        int n = s.size();
        if(n&1)return false;
        stack<char>st;
        for(int i = 0 ; i<n ; i++)
        {
            char c = s[i];
            if(c=='['||c=='{'||c=='(')
            {
                st.push(c);
            }
            else
            if(!st.empty())
            {
                if(result(st.top(),c))st.pop();
                else
                {
                    return false;
                }
            }
            else
            {
                return false;
            }
        }
        if(!st.empty())return false;
        else
        {
            return true;
        }
    }
};
