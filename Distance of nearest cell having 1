Question:

Link:
https://practice.geeksforgeeks.org/problems/distance-of-nearest-cell-having-1-1587115620/1?utm_source=youtube&utm_medium=collab_striver_ytdescription&utm_campaign=distance-of-nearest-cell-having-1

Given a binary grid of n*m. Find the distance of the nearest 1 in the grid for each cell.
The distance is calculated as |i1  - i2| + |j1 - j2|, where i1, j1 are the row number and column number of the current cell, and i2, j2 are the row number and column number of the nearest cell having value 1. There should be atleast one 1 in the grid.
 

Example 1:

Input: grid = {{0,1,1,0},{1,1,0,0},{0,0,1,1}}
Output: {{1,0,0,1},{0,0,1,1},{1,1,0,0}}
Explanation: The grid is-
0 1 1 0 
1 1 0 0 
0 0 1 1 
0's at (0,0), (0,3), (1,2), (1,3), (2,0) and
(2,1) are at a distance of 1 from 1's at (0,1),
(0,2), (0,2), (2,3), (1,0) and (1,1)
respectively.


Example 2:

Input: grid = {{1,0,1},{1,1,0},{1,0,0}}
Output: {{0,1,0},{0,0,1},{0,1,2}}
Explanation: The grid is-
1 0 1
1 1 0
1 0 0
0's at (0,1), (1,2), (2,1) and (2,2) are at a 
distance of 1, 1, 1 and 2 from 1's at (0,0),
(0,2), (2,0) and (1,1) respectively.



Answer:

class Solution 
{
    public:
    //Function to find distance of nearest 1 in the grid for each cell.
	vector<vector<int>>nearest(vector<vector<int>>grid)
	{
	    // Code here
	    int n = grid.size();
	    int m = grid[0].size();
	    int vis[n][m];
	    vector<vector<int>>ans(n,vector<int>(m,0));
	    queue<pair<pair<int,int>,int>>q;
	    for(int i = 0 ; i<n ; i++)
	    {
	        for(int j = 0 ; j<m ; j++)
	        {
	            if(grid[i][j]==1)
	            {
	                vis[i][j] = 1;
	                q.push({{i,j},0});
	            }
	            else
	            {
	                vis[i][j] = 0;
	            }
	        }
	    }
	    int delrow[] = {-1,0,1,0};
	    int delcolum[] = {0,-1,0,1};
	    while(!q.empty())
	    {
	        int nr = q.front().first.first;
	        int nc = q.front().first.second;
	        int dist = q.front().second;
	        q.pop();
	        for(int i = 0 ; i<4 ; i++)
	        {
	            int nrr = nr + delrow[i];
	            int ncc = nc + delcolum[i];
	            if(nrr>=0 && nrr<n && ncc>=0 && ncc<m && !vis[nrr][ncc] && grid[nrr][ncc]==0)
	            {
	                vis[nrr][ncc] = 1;
	                ans[nrr][ncc] = dist+1;
	                q.push({{nrr,ncc},dist+1});
	            }
	        }
	    }
	    return ans; 
	}
};
