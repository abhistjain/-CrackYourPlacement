Question:

Link:
https://www.codingninjas.com/studio/problems/number-of-inversions_6840276?utm_source=youtube&utm_medium=affiliate&utm_campaign=striver_Arrayproblems&leftPanelTab=0

Problem Statement
Detailed explanation ( Input/output format, Notes, Images )
Sample Input 1:
4
4 3 2 1
Sample Output 1:
6
Explanation Of Sample Input 1:
Input:
A = [4, 3, 2, 1], N = 4
Output:
6
Explanation: 
The pairs satisfying the condition for inversion are (1, 2), (1, 3), (1, 4), (2, 3), (2, 4), and (3, 4).    
The number of inversions in the array is 6.
Sample Input 2:
5
1 20 6 4 5
Sample Output 2:
5


Answer:

#include<bits/stdc++.h>
using namespace std;

void merge(vector<int>&a , int first , int mid , int high , int & cnt)
{
    vector<int>temp;
    int left = first;
    int right = mid+1;
    
    while(left<=mid && right<=high)
    {
        if(a[left]<=a[right])
        {
            temp.push_back(a[left]);
            left++;
        }
        else
        {
            temp.push_back(a[right]);
            cnt += (mid - left + 1);
            right++;
        }
    }
    while(left<=mid)
    {
        temp.push_back(a[left]);
        left++;
    }
    while(right<=high)
    {
        temp.push_back(a[right]);
        right++;
    }
    for(int i = first ; i<=high ; i++)
    {
        a[i]=temp[i-first];
    }
}

void mergesort(vector<int>&a , int begin , int end , int & cnt)
{
    if(begin>=end)return;
    int mid = begin + (end-begin)/2;
    mergesort(a,begin,mid,cnt);
    mergesort(a,mid+1,end,cnt);
    merge(a,begin,mid,end,cnt);
    return ;
}

int numberOfInversions(vector<int>&a, int n) {
    // Write your code here.
    int cnt = 0 ;
    mergesort(a,0,n-1,cnt);
    return cnt;
}
