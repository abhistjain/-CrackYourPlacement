Question:

Link:
https://leetcode.com/problems/palindrome-partitioning/description/

Given a string s, partition s such that every 
substring
 of the partition is a 
palindrome
. Return all possible palindrome partitioning of s.

 

Example 1:

Input: s = "aab"
Output: [["a","a","b"],["aa","b"]]
Example 2:

Input: s = "a"
Output: [["a"]]


Answer:

class Solution {
public:
    void Partition(string&s,vector<vector<string>>&ans,vector<string>&answer,int index)
    {
        if(index>=s.size())
        {
            ans.push_back(answer);
            return;
        }
        for(int i = index ; i<s.size() ; i++)
        {  
            if(ispalindrome(s,index,i))
            {
                answer.push_back(s.substr(index,i-index+1));
                Partition(s,ans,answer,i+1); 
                answer.pop_back();        
            }
        }
    }
    bool ispalindrome(string s , int start , int end)
    {
        while(start<=end)
        {
            if(s[start++] != s[end--])return false;
        }
        return true;        
    }
    vector<vector<string>> partition(string s) {
        vector<vector<string>>ans;
        vector<string>answer;
        Partition(s,ans,answer,0);
        return ans;
    }
};
