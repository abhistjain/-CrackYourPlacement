Question:

Link: https://leetcode.com/problems/symmetric-tree/description/

Given the root of a binary tree, check whether it is a mirror of itself (i.e., symmetric around its center).

Example 1:


Input: root = [1,2,2,3,4,4,3]
Output: true
Example 2:


Input: root = [1,2,2,null,3,null,3]
Output: false


Answer:

class Solution {
public:
    bool Symmetric(TreeNode*root1 , TreeNode*root2)
    {
        if(root1 == NULL && root2 == NULL)return true;
        if(root1 != NULL && root2 == NULL)return false;
        if(root1 == NULL && root2 != NULL)return false;
        bool value = root1->val == root2->val;
        bool leftt = Symmetric(root1->left,root2->right);
        bool rightt = Symmetric(root1->right,root2->left);
        if(value && leftt && rightt)return true;
        else
        return false;
    }
    bool isSymmetric(TreeNode* root) {
        if(root == NULL)return true;
        return Symmetric(root->left , root->right);
    }
};

