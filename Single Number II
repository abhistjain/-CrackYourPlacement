Question: 

Link: https://leetcode.com/problems/single-number-ii/description/

Given an integer array nums where every element appears three times except for one, which appears exactly once. Find the single element and return it.

You must implement a solution with a linear runtime complexity and use only constant extra space.

 

Example 1:

Input: nums = [2,2,3,2]
Output: 3
Example 2:

Input: nums = [0,1,0,1,0,1,99]
Output: 99

Answer:

class Solution {
public:
    int singleNumber(vector<int>& nums) {
        map<int,list<int>>mapping;
        for(int i = 0 ; i<nums.size() ; i++)
        {
            mapping[nums[i]].push_back(i);
        }
        int ans = 0 ;
        for(auto i : mapping)
        {
            if(i.second.size()==1)return i.first;
        }
        return ans;
    }
};
