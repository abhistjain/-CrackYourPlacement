Question:

Link:
https://leetcode.com/problems/combination-sum-ii/

Given a collection of candidate numbers (candidates) and a target number (target), find all unique combinations in candidates where the candidate numbers sum to target.

Each number in candidates may only be used once in the combination.

Note: The solution set must not contain duplicate combinations.

 

Example 1:

Input: candidates = [10,1,2,7,6,1,5], target = 8
Output: 
[
[1,1,6],
[1,2,5],
[1,7],
[2,6]
]
Example 2:

Input: candidates = [2,5,2,1,2], target = 5
Output: 
[
[1,2,2],
[5]
]


Answer:

class Solution {
public:
    void Combination(vector<int>& candidates,vector<vector<int>>&ans,vector<int>&answer,int target,int index)
    {
        if(target==0)
        {
            ans.push_back(answer);
            return;
        }
        for(int i = index ; i<candidates.size() ; i++)
        {
            if(i > index && candidates[i]==candidates[i-1])continue;
            if(target < candidates[i])break;
            answer.push_back(candidates[i]);
            Combination(candidates,ans,answer,target-candidates[i],i+1);
            answer.pop_back();
        }
    }
    vector<vector<int>> combinationSum2(vector<int>& candidates, int target) {
        vector<vector<int>>ans;
        if(candidates.size()==0)return ans;
        sort(candidates.begin(),candidates.end());
        vector<int>answer;
        Combination(candidates,ans,answer,target,0);
        return ans;
    }
};
