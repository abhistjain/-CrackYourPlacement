QUESTION:

Given the root of a binary tree, return the length of the diameter of the tree.

The diameter of a binary tree is the length of the longest path between any two nodes in a tree. This path may or may not pass through the root.

The length of a path between two nodes is represented by the number of edges between them.

 
Example 1:
Input: root = [1,2,3,4,5]
Output: 3
Explanation: 3 is the length of the path [4,2,1,3] or [5,2,1,3].

Example 2:

Input: root = [1,2]
Output: 1

Example 3:
[4,-7,-3,null,null,-9,-3,9,-7,-4,null,6,null,-6,-6,null,null,0,6,5,null,9,null,null,-1,-4,null,null,null,-2]

The answer is: 8.

CODE: Here T.C. = O(N^2) In this all test cases are passing Except for this one...

[4,-7,-3,null,null,-9,-3,9,-7,-4,null,6,null,-6,-6,null,null,0,6,5,null,9,null,null,-1,-4,null,null,null,-2]
This Code is passing 101 successfully.

class Solution {
public:

    int height(TreeNode*root)
    {
        if(root == NULL)return 0;
        int leftans = height(root->left);
        int rightans = height(root->right);
        return 1+max(leftans,rightans);
    }

    int diameterOfBinaryTree(TreeNode* root) {
        if(root == NULL)return 0;
        int leftdia = diameterOfBinaryTree(root->left);
        int rightdia = diameterOfBinaryTree(root->right);
        int nodedia = 1 + height(root->left) + height(root->right);
        return max(nodedia,max(leftdia,rightdia))-1;
    }
};

CORRECT CODE: O(N) is the time complexity. This I what I learned Today. A new and more clear approach.

class Solution {
public:
    int height(int &diameter , TreeNode* root)
    {
        if(root == NULL)return 0;
        int lh = height(diameter , root->left);
        int rh = height(diameter , root->right);
        diameter = max(lh+rh,diameter);
        return 1+ max(lh,rh);
    }
    int diameterOfBinaryTree(TreeNode* root) {
        int diameter = 0 ;
        height(diameter , root);
        return diameter;
    }
};
