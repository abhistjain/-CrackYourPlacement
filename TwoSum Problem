Question is :

LINK: https://leetcode.com/problems/two-sum/


Given an array of integer nums and an integer target, return indices of the two numbers such that they add up to the target.

You may assume that each input would have exactly one solution, and you may not use the same element twice.

You can return the answer in any order.

Example 1:

Input: nums = [2,7,11,15], target = 9
Output: [0,1]
Explanation: Because nums[0] + nums[1] == 9, we return [0, 1].
Example 2:

Input: nums = [3,2,4], target = 6
Output: [1,2]
Example 3:

Input: nums = [3,3], target = 6
Output: [0,1]

ANSWER:

T.C. = O(N^2) using two For Loop

class Solution {
public:
    vector<int> twoSum(vector<int>& nums, int target) {
        for(int i = 0 ; i < nums.size(); i++)
        {
            for(int j = i+1  ; j < nums.size() ; j++)
            {
                if(nums[i]+nums[j]==target)return {i,j};
            }
        }
        return {-1,-1};
    }
};

Using Dynamic Array is:

class Solution {
public:
    vector<int> twoSum(vector<int>& nums, int target) {
        vector<int>ans;
        for(int i=0;i<nums.size();i++)
        {
            for(int j=i+1;j<nums.size();j++)
            {
                if(nums[i]+nums[j]==target)
                {
                    ans.push_back(i);
                    ans.push_back(j);
                }
            }
        }
        return ans;
    }
};


Next Approach: Two-pointer approach.

But here we have to return the index and while Sorting we lost the values of the index. So no use of using this approach over here.

Next Approach: Mapping.

class Solution {
public:
    vector<int> twoSum(vector<int>& nums, int target) {
        unordered_map<int,int>mp;
        for(int i = 0 ; i<nums.size(); i++)
        {
            int diff = target - nums[i];
            auto it = mp.find(diff);
            if(it != mp.end())return {mp[diff],i};
            else
            mp.insert(make_pair(nums[i],i));
        }
        return {-1,-1};
    }
};



